@article{gulwani2017program,
  title={Program synthesis},
  author={Gulwani, Sumit and Polozov, Oleksandr and Singh, Rishabh and others},
  journal={Foundations and Trends{\textregistered} in Programming Languages},
  volume={4},
  number={1-2},
  pages={1--119},
  year={2017},
  publisher={Now Publishers, Inc.}
}


@article{zornsolver,
  title={Solver Aided Reverse Engineering of Architectural},
  author={Zorn, Bill and Grossman, Dan and Ceze, Luis},
  journal={Proceedings of the 44th Annual International Symposium on Computer Architecture},
  year={2017}
}

@article{osera2015program,
  title={Program synthesis with types},
  author={Osera, Peter-Michael Santos},
  journal={University of Pennsylvania, Department of Computer Science. PhD Thesis.},
  year={2015}
}

@book{pierce2002types,
  title={Types and programming languages},
  author={Pierce, Benjamin C},
  year={2002},
  publisher={MIT press}
}

@article{kernighan1974programming,
  title={Programming in C - A Tutorial},
  author={Kernighan, Brian W},
  journal={Unpublished internal memorandum, Bell Laboratories},
  year={1974}
}

@incollection{leibniz1989dissertation,
  title={Dissertation on the Art of Combinations},
  author={Leibniz, Gottfried Wilhelm},
  booktitle={Philosophical Papers and Letters},
  pages={73--84},
  year={1989},
  publisher={Springer}
}


@article{lovelacenotes,
  title={Sketch of the analytical engine invented by Charles Babbage, by LF Menabrea, officer of the military engineers, with notes upon the memoir by the translator},
  author={Lovelace, Ada A},
  journal={Taylor's Scientific Memoirs},
  volume={3},
  pages={666--731},
  year={1842}
}


@book{von2012computer,
  title={The computer and the brain},
  author={Von Neumann, John},
  year={2012},
  publisher={Yale University Press}
}

@article{van1998dynamical,
  title={The dynamical hypothesis in cognitive science},
  author={Van Gelder, Tim},
  journal={Behavioral and brain sciences},
  volume={21},
  number={5},
  pages={615--628},
  year={1998},
  publisher={Cambridge University Press}
}


@article{griffiths2010probabilistic,
  title={Probabilistic models of cognition: Exploring representations and inductive biases},
  author={Griffiths, Thomas L and Chater, Nick and Kemp, Charles and Perfors, Amy and Tenenbaum, Joshua B},
  journal={Trends in cognitive sciences},
  volume={14},
  number={8},
  pages={357--364},
  year={2010},
  publisher={Elsevier}
}

@inproceedings{velez2017interpreting,
  title={Interpreting actions by attributing compositional desires.},
  author={Velez-Ginorio, Joey and Siegel, Max H and Tenenbaum, Joshua B and Jara-Ettinger, Julian},
  booktitle={CogSci},
  year={2017}
}

@article{lake2015human,
  title={Human-level concept learning through probabilistic program induction},
  author={Lake, Brenden M and Salakhutdinov, Ruslan and Tenenbaum, Joshua B},
  journal={Science},
  volume={350},
  number={6266},
  pages={1332--1338},
  year={2015},
  publisher={American Association for the Advancement of Science}
}

@article{clark1997dynamical,
  title={The dynamical challenge},
  author={Clark, Andy},
  journal={Cognitive Science},
  volume={21},
  number={4},
  pages={461--481},
  year={1997},
  publisher={Elsevier}
}

@article{wadler2015propositions,
  title={Propositions as types.},
  author={Wadler, Philip},
  journal={Commun. ACM},
  volume={58},
  number={12},
  pages={75--84},
  year={2015}
}

@incollection{barrett2018satisfiability,
  title={Satisfiability modulo theories},
  author={Barrett, Clark and Tinelli, Cesare},
  booktitle={Handbook of Model Checking},
  pages={305--343},
  year={2018},
  publisher={Springer}
}

@book{solar2008program,
  title={Program synthesis by sketching},
  author={Solar-Lezama, Armando},
  year={2008},
  publisher={Citeseer}
}

@inproceedings{torlak2013growing,
  title={Growing solver-aided languages with rosette},
  author={Torlak, Emina and Bodik, Rastislav},
  booktitle={Proceedings of the 2013 ACM international symposium on New ideas, new paradigms, and reflections on programming \& software},
  pages={135--152},
  year={2013},
  organization={ACM}
}

@book{kroening2016decision,
  title={Decision procedures},
  author={Kroening, Daniel and Strichman, Ofer},
  year={2016},
  publisher={Springer}
}

@inproceedings{polikarpova2016program,
  title={Program synthesis from polymorphic refinement types},
  author={Polikarpova, Nadia and Kuraj, Ivan and Solar-Lezama, Armando},
  booktitle={ACM SIGPLAN Notices},
  volume={51},
  number={6},
  pages={522--538},
  year={2016},
  organization={ACM}
}

@techreport{freeman1994refinement,
  title={Refinement Types for ML},
  author={Freeman, Tim},
  year={1994},
  institution={Carnegie-Mellon University, Department of Computer Science, No. CMU-CS-94-110.}
}

@book{sipser2006introduction,
  title={Introduction to the Theory of Computation},
  author={Sipser, Michael and others},
  volume={2},
  year={2006},
  publisher={Thomson Course Technology Boston}
}

@article{avigad1998godel,
  title={G{\"o}del's functional ("Dialectica") interpretation},
  author={Avigad, Jeremy},
  journal={Handbook of proof theory},
  volume={137},
  pages={337--405},
  year={1998}
}

@book{girard1989proofs,
  title={Proofs and types},
  author={Girard, Jean-Yves and Taylor, Paul and Lafont, Yves},
  year={1989},
  volume={7}
}

@article{ariola1997call,
  title={The call-by-need lambda calculus},
  author={Ariola, Zena M and Felleisen, Matthias},
  journal={Journal of functional programming},
  volume={7},
  number={3},
  pages={265--301},
  year={1997},
  publisher={Cambridge University Press}
}

@article{plotkin1975call,
  title={Call-by-name, call-by-value and the $\lambda$-calculus},
  author={Plotkin, Gordon D.},
  journal={Theoretical computer science},
  volume={1},
  number={2},
  pages={125--159},
  year={1975},
  publisher={Elsevier}
}

@inproceedings{cardelli1991extension,
  title={An extension of system F with subtyping},
  author={Cardelli, Luca and Martini, Simone and Mitchell, John C and Scedrov, Andre},
  booktitle={International symposium on theoretical aspects of computer software},
  pages={750--770},
  year={1991},
  organization={Springer}
}

@inproceedings{ellis2018learning,
  title={Learning libraries of subroutines for neurally--guided bayesian program induction},
  author={Ellis, Kevin and Morales, Lucas and Sabl{\'e}-Meyer, Mathias and Solar-Lezama, Armando and Tenenbaum, Josh},
  booktitle={Advances in Neural Information Processing Systems},
  pages={7805--7815},
  year={2018}
}

@book{pierce2005advanced,
  title={Advanced topics in types and programming languages},
  author={Pierce, Benjamin C},
  year={2005},
  publisher={MIT press}
}


@inproceedings{knoth2019resource,
  title={Resource-guided program synthesis},
  author={Knoth, Tristan and Wang, Di and Polikarpova, Nadia and Hoffmann, Jan},
  booktitle={Proceedings of the 40th ACM SIGPLAN Conference on Programming Language Design and Implementation},
  pages={253--268},
  year={2019},
  organization={ACM}
}

@article{ehrhard2018introduction,
  title={An introduction to differential linear logic: proof-nets, models and antiderivatives},
  author={Ehrhard, Thomas},
  journal={Mathematical Structures in Computer Science},
  volume={28},
  number={7},
  pages={995--1060},
  year={2018},
  publisher={Cambridge University Press}
}

@article{clift2018derivatives,
  title={Derivatives of Turing machines in Linear Logic},
  author={Clift, James and Murfet, Daniel},
  journal={arXiv preprint arXiv:1805.11813},
  year={2018}
}

@article{lecun2015deep,
  title={Deep learning},
  author={LeCun, Yann and Bengio, Yoshua and Hinton, Geoffrey},
  journal={Nature},
  volume={521},
  number={7553},
  pages={436},
  year={2015},
  publisher={Nature Publishing Group}
}

@article{leroy2014ocaml,
  title={The OCaml system release 4.02},
  author={Leroy, Xavier and Doligez, Damien and Frisch, Alain and Garrigue, Jacques and R{\'e}my, Didier and Vouillon, J{\'e}r{\^o}me},
  journal={Institut National de Recherche en Informatique et en Automatique},
  volume={54},
  year={2014}
}

@article {ilp,
	title = {Inductive logic programming},
	journal = {New Generation Computing},
	year = {1991},
	url = {http://www.doc.ic.ac.uk/~shm/Papers/ilp.pdf},
	author = {Stephen Muggleton}
}

@article {cropper,
	title = {Learning programs by learning from failures},
	year = {2020},
	url = {https://arxiv.org/pdf/2005.02259.pdf},
	author = {Andrew Cropper and Rolf Morel}
}

@phdthesis{rondon2012liquid,
  title={Liquid types},
  author={Rondon, Patrick},
  year={2012},
  school={UC San Diego}
}

@phdthesis{solar2008program,
  title={Program Synthesis by Sketching},
  author={Solar-Lezama, Armando},
  year={2008},
  school={UNIVERSITY OF CALIFORNIA, BERKELEY}
}

@article{rosette,
  title={A lightweight symbolic virtual machine for solver-aided host languages},
  author={Torlak, Emina and Bodik, Rastislav},
  journal={ACM SIGPLAN Notices},
  volume={49},
  number={6},
  pages={530--541},
  year={2014},
  publisher={ACM New York, NY, USA}
}

@misc{msprose,
  title = {Prose},
  howpublished = {\url{https://microsoft.github.io/prose/team/}},
  note = {Accessed: 2020-07-09},
  author = {Microsoft Research}
}

@article{chugh2012nested,
  title={Nested refinements: a logic for duck typing},
  author={Chugh, Ravi and Rondon, Patrick M and Jhala, Ranjit},
  journal={ACM SIGPLAN Notices},
  volume={47},
  number={1},
  pages={231--244},
  year={2012},
  publisher={ACM New York, NY, USA}
}

@article{10.1145/2775050.2633366,
author = {Vazou, Niki and Seidel, Eric L. and Jhala, Ranjit},
title = {LiquidHaskell: Experience with Refinement Types in the Real World},
year = {2014},
issue_date = {December 2014},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {49},
number = {12},
issn = {0362-1340},
url = {https://doi.org/10.1145/2775050.2633366},
doi = {10.1145/2775050.2633366},
journal = {SIGPLAN Not.},
month = sep,
pages = {39â€“51},
numpages = {13},
keywords = {Haskell, verification, smt-based verification, refinement types}
}
  
@inproceedings{liquidhaskell,
author = {Vazou, Niki and Seidel, Eric L. and Jhala, Ranjit},
title = {LiquidHaskell: Experience with Refinement Types in the Real World},
year = {2014},
isbn = {9781450330411},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2633357.2633366},
doi = {10.1145/2633357.2633366},
booktitle = {Proceedings of the 2014 ACM SIGPLAN Symposium on Haskell},
pages = {39â€“51},
numpages = {13},
keywords = {Haskell, verification, smt-based verification, refinement types},
location = {Gothenburg, Sweden},
series = {Haskell â€™14}
}
  
@article {dreamcoder,
	title = {DreamCoder: Growing generalizable, interpretable knowledge with wake-sleep Bayesian program learning},
	year = {2020},
	url = {https://arxiv.org/pdf/2006.08381.pdf},
	author = {Kevin Ellis and Catherine Wong and Maxwell Nye and Mathias Sable-Meyer and Luc Cary and Lucas Morales and Luke Hewitt and Armando Solar-Lezama and Joshua B. Tenenbaum}
}

@article {learning-deepmind,
	title = {Learning Explanatory Rules from Noisy Data},
	journal = {Journal of Artificial Intelligence Research (JAIR)},
	volume = {Special Track on Deep Learning, Knowledge Representation, and Reasoning},
	year = {2018},
	url = {https://arxiv.org/pdf/1711.04574.pdf},
	author = {Richard Evans and Edward Grefenstette}
}

@article {learning-datalog,
	title = {Synthesizing Datalog Programs using Numerical Relaxation.},
	journal = {IJCAI},
	year = {2019},
	url = {https://arxiv.org/pdf/1906.00163.pdf},
	author = {Mukund Raghothaman and Kihong Heo and Xujie Si and Mayur Naik}
}

@article {1517164,
	title = {Programmatically Interpretable Reinforcement Learning},
	journal = {ICML},
	year = {2018},
	url = {https://arxiv.org/pdf/1804.02477.pdf},
	author = {Vijayaraghavan Murali and Rishabh Singh and Pushmeet Kohli and Swarat Chaudhuri}
}

@InProceedings{gulwani2011automating,
author = {Gulwani, Sumit},
title = {Automating String Processing in Spreadsheets using Input-Output Examples},
booktitle = {PoPL'11, January 26-28, 2011, Austin, Texas, USA},
year = {2011},
month = {January},
abstract = {We describe the design of a string programming/expression language that supports restricted forms of regular expressions, conditionals and loops. The language is expressive enough to represent a wide variety of string manipulation tasks that end-users struggle with. We describe an algorithm based on several novel concepts for synthesizing a desired program in this language from input-output examples. The synthesis algorithm is very efficient taking fraction of a second for various benchmark examples. The synthesis algorithm is interactive and has several desirable features: it can rank multiple solutions and has fast convergence, it can detect noise in the user input, and it supports an active interaction model wherein the user is prompted to provide outputs on inputs that may have multiple computational interpretations.

The algorithm has been implemented as an interactive add-in for Microsoft Excel spreadsheet system. The prototype tool has met the golden test - it has synthesized part of itself, and has been used to solve problems beyond authors' imagination.},
url = {https://www.microsoft.com/en-us/research/publication/automating-string-processing-spreadsheets-using-input-output-examples/},
edition = {PoPLâ€™11, January 26â€“28, 2011, Austin, Texas, USA},
}

@InProceedings{flashmeta,
author = {Polozov, Oleksandr and Gulwani, Sumit},
title = {FlashMeta: A Framework for Inductive Program Synthesis},
booktitle = {OOPSLA 2015 Proceedings of the 2015 ACM SIGPLAN International Conference on Object-Oriented Programming, Systems, Languages, and Applications},
year = {2015},
month = {October},
abstract = {Inductive synthesis, or programming-by-examples (PBE) is gaining prominence with disruptive applications for automating repetitive tasks in end-user programming. However, designing, developing, and maintaining an effective industrial quality inductive synthesizer is an intellectual and engineering challenge, requiring 1-2 man-years of effort.

Our novel observation is that many PBE algorithms are a natural fall-out of one generic meta-algorithm and the domain-specific properties of the operators in the underlying domain-specific language (DSL). The meta-algorithm propagates example-based constraints on an expression to its subexpressions by leveraging associated witness functions, which essentially capture the inverse semantics of the underlying operator. This observation enables a novel program synthesis methodology called data-driven domain-specific deduction (D4), where domain-specific insight, provided by the DSL designer, is separated from the synthesis algorithm.

Our FlashMeta framework implements this methodology, allowing synthesizer developers to generate an efficient synthesizer from the mere DSL definition (if properties of the DSL operators have been modeled). In our case studies, we found that 10+ existing industrial-quality mass-market applications based on PBE can be cast as instances of D4. Our evaluation includes reimplementation of some prior works, which in FlashMeta become more efficient, maintainable, and extensible. As a result, FlashMeta-based PBE tools are deployed in several industrial products, including Microsoft PowerShell 3.0 for Windows 10, Azure Operational Management Suite, and Microsoft Cortana digital assistant.},
url = {https://www.microsoft.com/en-us/research/publication/flashmeta-framework-inductive-program-synthesis/},
pages = {107-126},
edition = {OOPSLA 2015 Proceedings of the 2015 ACM SIGPLAN International Conference on Object-Oriented Programming, Systems, Languages, and Applications},
}