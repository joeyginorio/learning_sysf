\begin{thebibliography}{10}

\bibitem{ariola1997call}
Zena~M Ariola and Matthias Felleisen.
\newblock The call-by-need lambda calculus.
\newblock {\em Journal of functional programming}, 7(3):265--301, 1997.

\bibitem{avigad1998godel}
Jeremy Avigad.
\newblock G{\"o}del's functional ("dialectica") interpretation.
\newblock {\em Handbook of proof theory}, 137:337--405, 1998.

\bibitem{barrett2018satisfiability}
Clark Barrett and Cesare Tinelli.
\newblock Satisfiability modulo theories.
\newblock In {\em Handbook of Model Checking}, pages 305--343. Springer, 2018.

\bibitem{cardelli1991extension}
Luca Cardelli, Simone Martini, John~C Mitchell, and Andre Scedrov.
\newblock An extension of system f with subtyping.
\newblock In {\em International symposium on theoretical aspects of computer
  software}, pages 750--770. Springer, 1991.

\bibitem{clark1997dynamical}
Andy Clark.
\newblock The dynamical challenge.
\newblock {\em Cognitive Science}, 21(4):461--481, 1997.

\bibitem{clift2018derivatives}
James Clift and Daniel Murfet.
\newblock Derivatives of turing machines in linear logic.
\newblock {\em arXiv preprint arXiv:1805.11813}, 2018.

\bibitem{ellis2018learning}
Kevin Ellis, Lucas Morales, Mathias Sabl{\'e}-Meyer, Armando Solar-Lezama, and
  Josh Tenenbaum.
\newblock Learning libraries of subroutines for neurally--guided bayesian
  program induction.
\newblock In {\em Advances in Neural Information Processing Systems}, pages
  7805--7815, 2018.

\bibitem{freeman1994refinement}
Tim Freeman.
\newblock Refinement types for ml.
\newblock Technical report, Carnegie-Mellon University, Department of Computer
  Science, No. CMU-CS-94-110., 1994.

\bibitem{girard1989proofs}
Jean-Yves Girard, Paul Taylor, and Yves Lafont.
\newblock {\em Proofs and types}, volume~7.

\bibitem{griffiths2010probabilistic}
Thomas~L Griffiths, Nick Chater, Charles Kemp, Amy Perfors, and Joshua~B
  Tenenbaum.
\newblock Probabilistic models of cognition: Exploring representations and
  inductive biases.
\newblock {\em Trends in cognitive sciences}, 14(8):357--364, 2010.

\bibitem{gulwani2017program}
Sumit Gulwani, Oleksandr Polozov, Rishabh Singh, et~al.
\newblock Program synthesis.
\newblock {\em Foundations and Trends{\textregistered} in Programming
  Languages}, 4(1-2):1--119, 2017.

\bibitem{kernighan1974programming}
Brian~W Kernighan.
\newblock Programming in c - a tutorial.
\newblock {\em Unpublished internal memorandum, Bell Laboratories}, 1974.

\bibitem{kroening2016decision}
Daniel Kroening and Ofer Strichman.
\newblock {\em Decision procedures}.
\newblock Springer, 2016.

\bibitem{lake2015human}
Brenden~M Lake, Ruslan Salakhutdinov, and Joshua~B Tenenbaum.
\newblock Human-level concept learning through probabilistic program induction.
\newblock {\em Science}, 350(6266):1332--1338, 2015.

\bibitem{lecun2015deep}
Yann LeCun, Yoshua Bengio, and Geoffrey Hinton.
\newblock Deep learning.
\newblock {\em Nature}, 521(7553):436, 2015.

\bibitem{leibniz1989dissertation}
Gottfried~Wilhelm Leibniz.
\newblock Dissertation on the art of combinations.
\newblock In {\em Philosophical Papers and Letters}, pages 73--84. Springer,
  1989.

\bibitem{leroy2014ocaml}
Xavier Leroy, Damien Doligez, Alain Frisch, Jacques Garrigue, Didier R{\'e}my,
  and J{\'e}r{\^o}me Vouillon.
\newblock The ocaml system release 4.02.
\newblock {\em Institut National de Recherche en Informatique et en
  Automatique}, 54, 2014.

\bibitem{lovelacenotes}
Ada~A Lovelace.
\newblock Sketch of the analytical engine invented by charles babbage, by lf
  menabrea, officer of the military engineers, with notes upon the memoir by
  the translator.
\newblock {\em Taylor's Scientific Memoirs}, 3:666--731, 1842.

\bibitem{mcclelland2010letting}
James~L McClelland, Matthew~M Botvinick, David~C Noelle, David~C Plaut,
  Timothy~T Rogers, Mark~S Seidenberg, and Linda~B Smith.
\newblock Letting structure emerge: connectionist and dynamical systems
  approaches to cognition.
\newblock {\em Trends in cognitive sciences}, 14(8):348--356, 2010.

\bibitem{osera2015program}
Peter-Michael~Santos Osera.
\newblock Program synthesis with types.
\newblock {\em University of Pennsylvania, Department of Computer Science. PhD
  Thesis.}, 2015.

\bibitem{pierce2002types}
Benjamin~C Pierce.
\newblock {\em Types and programming languages}.
\newblock MIT press, 2002.

\bibitem{pierce2005advanced}
Benjamin~C Pierce.
\newblock {\em Advanced topics in types and programming languages}.
\newblock MIT press, 2005.

\bibitem{plotkin1975call}
Gordon~D. Plotkin.
\newblock Call-by-name, call-by-value and the $\lambda$-calculus.
\newblock {\em Theoretical computer science}, 1(2):125--159, 1975.

\bibitem{polikarpova2016program}
Nadia Polikarpova, Ivan Kuraj, and Armando Solar-Lezama.
\newblock Program synthesis from polymorphic refinement types.
\newblock In {\em ACM SIGPLAN Notices}, volume~51, pages 522--538. ACM, 2016.

\bibitem{sipser2006introduction}
Michael Sipser et~al.
\newblock {\em Introduction to the Theory of Computation}, volume~2.
\newblock Thomson Course Technology Boston, 2006.

\bibitem{solar2008program}
Armando Solar-Lezama.
\newblock {\em Program synthesis by sketching}.
\newblock Citeseer, 2008.

\bibitem{torlak2013growing}
Emina Torlak and Rastislav Bodik.
\newblock Growing solver-aided languages with rosette.
\newblock In {\em Proceedings of the 2013 ACM international symposium on New
  ideas, new paradigms, and reflections on programming \& software}, pages
  135--152. ACM, 2013.

\bibitem{van1998dynamical}
Tim Van~Gelder.
\newblock The dynamical hypothesis in cognitive science.
\newblock {\em Behavioral and brain sciences}, 21(5):615--628, 1998.

\bibitem{velez2017interpreting}
Joey Velez-Ginorio, Max~H Siegel, Joshua~B Tenenbaum, and Julian Jara-Ettinger.
\newblock Interpreting actions by attributing compositional desires.
\newblock In {\em CogSci}, 2017.

\bibitem{von2012computer}
John Von~Neumann.
\newblock {\em The computer and the brain}.
\newblock Yale University Press, 2012.

\bibitem{wadler2015propositions}
Philip Wadler.
\newblock Propositions as types.
\newblock {\em Commun. ACM}, 58(12):75--84, 2015.

\bibitem{zornsolver}
Bill Zorn, Dan Grossman, and Luis Ceze.
\newblock Solver aided reverse engineering of architectural.
\newblock {\em Proceedings of the 44th Annual International Symposium on
  Computer Architecture}, 2017.

\end{thebibliography}
